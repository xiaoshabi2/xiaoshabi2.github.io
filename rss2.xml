<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cy</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Wed, 25 Jul 2018 13:21:16 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>SpringCloud 配置 eureka-server （sprinboot2.0.1环境）</title>
      <link>http://yoursite.com/2018/06/05/SpringCloud%20%E9%85%8D%E7%BD%AE%20eureka-server%20%EF%BC%88sprinboot2.0.1%E7%8E%AF%E5%A2%83%EF%BC%89/</link>
      <guid>http://yoursite.com/2018/06/05/SpringCloud%20%E9%85%8D%E7%BD%AE%20eureka-server%20%EF%BC%88sprinboot2.0.1%E7%8E%AF%E5%A2%83%EF%BC%89/</guid>
      <pubDate>Tue, 05 Jun 2018 11:23:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;SpringCloud-配置-eureka-server-（sprinboot2-0-1环境）&quot;&gt;&lt;a href=&quot;#SpringCloud-配置-eureka-server-（sprinboot2-0-1环境）&quot; class=&quot;headerlink&quot; title
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="SpringCloud-配置-eureka-server-（sprinboot2-0-1环境）"><a href="#SpringCloud-配置-eureka-server-（sprinboot2-0-1环境）" class="headerlink" title="SpringCloud 配置 eureka-server （sprinboot2.0.1环境）"></a>SpringCloud 配置 eureka-server （sprinboot2.0.1环境）</h1><h3 id="1-Maven导入包"><a href="#1-Maven导入包" class="headerlink" title="1.Maven导入包"></a>1.Maven导入包</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;groupId&gt;com.example&lt;/groupId&gt;&lt;artifactId&gt;demo&lt;/artifactId&gt;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&lt;packaging&gt;jar&lt;/packaging&gt;&lt;name&gt;demo&lt;/name&gt;&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;&lt;parent&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;    &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&lt;/parent&gt;&lt;properties&gt;    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;    &lt;java.version&gt;1.8&lt;/java.version&gt;    &lt;spring-cloud.version&gt;Finchley.RELEASE&lt;/spring-cloud.version&gt;&lt;/properties&gt;&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;        &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;&lt;repositories&gt;    &lt;repository&gt;        &lt;id&gt;spring-snapshots&lt;/id&gt;        &lt;name&gt;Spring Snapshots&lt;/name&gt;        &lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;        &lt;snapshots&gt;            &lt;enabled&gt;true&lt;/enabled&gt;        &lt;/snapshots&gt;    &lt;/repository&gt;    &lt;repository&gt;        &lt;id&gt;spring-milestones&lt;/id&gt;        &lt;name&gt;Spring Milestones&lt;/name&gt;        &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;        &lt;snapshots&gt;            &lt;enabled&gt;false&lt;/enabled&gt;        &lt;/snapshots&gt;    &lt;/repository&gt;&lt;/repositories&gt;&lt;dependencyManagement&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;            &lt;version&gt;${spring-cloud.version}&lt;/version&gt;            &lt;type&gt;pom&lt;/type&gt;            &lt;scope&gt;import&lt;/scope&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;build&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;</code></pre><p></p><p>其中 这部分代码很关键 在按SpringCloud微服务实战中 那样去配置项目在springboot2.0以上版本跑不起来需要添加下面的代码</p><pre><code>&lt;repositories&gt;    &lt;repository&gt;        &lt;id&gt;spring-snapshots&lt;/id&gt;        &lt;name&gt;Spring Snapshots&lt;/name&gt;        &lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;        &lt;snapshots&gt;            &lt;enabled&gt;true&lt;/enabled&gt;        &lt;/snapshots&gt;    &lt;/repository&gt;    &lt;repository&gt;        &lt;id&gt;spring-milestones&lt;/id&gt;        &lt;name&gt;Spring Milestones&lt;/name&gt;        &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;        &lt;snapshots&gt;            &lt;enabled&gt;false&lt;/enabled&gt;        &lt;/snapshots&gt;    &lt;/repository&gt;&lt;/repositories&gt;</code></pre><h3 id="2-在启动类加上注解-EnableEurekaServer"><a href="#2-在启动类加上注解-EnableEurekaServer" class="headerlink" title="2.在启动类加上注解@EnableEurekaServer"></a>2.在启动类加上注解@EnableEurekaServer</h3><pre><code>@EnableEurekaServer@SpringBootApplicationpublic class DemoApplication {    public static void main(String[] args) {        SpringApplication.run(DemoApplication.class, args);    }}</code></pre><h3 id="3-在application-properties"><a href="#3-在application-properties" class="headerlink" title="3.在application.properties"></a>3.在application.properties</h3><p>添加以下代码</p><pre><code>server.port=8260eureka.instance.hostname=localhosteureka.client.register-with-eureka=falseeureka.client.fetch-registry=falseeureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka</code></pre><ol><li>server.port=8260 代表访问端口 </li><li>eureka.client.register-with-eureka=false 代表不注册自己</li><li>eureka.client.fetch-registry=false 注册中心不去检索服务</li><li>eureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka 访问地址</li><li>eureka.instance.hostname=localhost 代表本地</li></ol><h3 id="3-在启动springboot在浏览器中输入"><a href="#3-在启动springboot在浏览器中输入" class="headerlink" title="3.在启动springboot在浏览器中输入"></a>3.在启动springboot在浏览器中输入</h3><pre><code>http://localhost:8260/ 就可以访问</code></pre><h3 id="4-备注"><a href="#4-备注" class="headerlink" title="4.备注"></a>4.备注</h3><p>博主踩了大半天的坑最终通过这个方法实现了希望能帮到一些初学者</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/06/05/SpringCloud%20%E9%85%8D%E7%BD%AE%20eureka-server%20%EF%BC%88sprinboot2.0.1%E7%8E%AF%E5%A2%83%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SpringCloud 配置 eureka-client （sprinboot2.0.1环境）</title>
      <link>http://yoursite.com/2018/06/05/SpringCloud%20%E9%85%8D%E7%BD%AE%20eureka-client%20%EF%BC%88sprinboot2.0.1%E7%8E%AF%E5%A2%83%EF%BC%89/</link>
      <guid>http://yoursite.com/2018/06/05/SpringCloud%20%E9%85%8D%E7%BD%AE%20eureka-client%20%EF%BC%88sprinboot2.0.1%E7%8E%AF%E5%A2%83%EF%BC%89/</guid>
      <pubDate>Tue, 05 Jun 2018 11:23:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;SpringCloud-配置-eureka-client-（sprinboot2-0-1环境）&quot;&gt;&lt;a href=&quot;#SpringCloud-配置-eureka-client-（sprinboot2-0-1环境）&quot; class=&quot;headerlink&quot; title
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="SpringCloud-配置-eureka-client-（sprinboot2-0-1环境）"><a href="#SpringCloud-配置-eureka-client-（sprinboot2-0-1环境）" class="headerlink" title="SpringCloud 配置 eureka-client （sprinboot2.0.1环境）"></a>SpringCloud 配置 eureka-client （sprinboot2.0.1环境）</h1><h3 id="1-Maven导入包"><a href="#1-Maven导入包" class="headerlink" title="1.Maven导入包"></a>1.Maven导入包</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;groupId&gt;com.example&lt;/groupId&gt;&lt;artifactId&gt;demo&lt;/artifactId&gt;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&lt;packaging&gt;jar&lt;/packaging&gt;&lt;name&gt;demo&lt;/name&gt;&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;&lt;parent&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;    &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&lt;/parent&gt;&lt;properties&gt;    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;    &lt;java.version&gt;1.8&lt;/java.version&gt;    &lt;spring-cloud.version&gt;Finchley.RELEASE&lt;/spring-cloud.version&gt;&lt;/properties&gt;&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;        &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;&lt;repositories&gt;    &lt;repository&gt;        &lt;id&gt;spring-snapshots&lt;/id&gt;        &lt;name&gt;Spring Snapshots&lt;/name&gt;        &lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;        &lt;snapshots&gt;            &lt;enabled&gt;true&lt;/enabled&gt;        &lt;/snapshots&gt;    &lt;/repository&gt;    &lt;repository&gt;        &lt;id&gt;spring-milestones&lt;/id&gt;        &lt;name&gt;Spring Milestones&lt;/name&gt;        &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;        &lt;snapshots&gt;            &lt;enabled&gt;false&lt;/enabled&gt;        &lt;/snapshots&gt;    &lt;/repository&gt;&lt;/repositories&gt;&lt;dependencyManagement&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;            &lt;version&gt;${spring-cloud.version}&lt;/version&gt;            &lt;type&gt;pom&lt;/type&gt;            &lt;scope&gt;import&lt;/scope&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;build&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;</code></pre><p></p><p>其中 这部分代码很关键 在按SpringCloud微服务实战中 那样去配置项目在springboot2.0以上版本跑不起来需要添加下面的代码</p><pre><code>&lt;repositories&gt;    &lt;repository&gt;        &lt;id&gt;spring-snapshots&lt;/id&gt;        &lt;name&gt;Spring Snapshots&lt;/name&gt;        &lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;        &lt;snapshots&gt;            &lt;enabled&gt;true&lt;/enabled&gt;        &lt;/snapshots&gt;    &lt;/repository&gt;    &lt;repository&gt;        &lt;id&gt;spring-milestones&lt;/id&gt;        &lt;name&gt;Spring Milestones&lt;/name&gt;        &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;        &lt;snapshots&gt;            &lt;enabled&gt;false&lt;/enabled&gt;        &lt;/snapshots&gt;    &lt;/repository&gt;&lt;/repositories&gt;</code></pre><h3 id="2-在启动类加上注解-EnableEurekaClient"><a href="#2-在启动类加上注解-EnableEurekaClient" class="headerlink" title="2.在启动类加上注解@EnableEurekaClient"></a>2.在启动类加上注解@EnableEurekaClient</h3><pre><code>@EnableEurekaClient@SpringBootApplicationpublic class DemoApplication {    public static void main(String[] args) {        SpringApplication.run(DemoApplication.class, args);    }}</code></pre><h3 id="3-在application-properties"><a href="#3-在application-properties" class="headerlink" title="3.在application.properties"></a>3.在application.properties</h3><p>添加以下代码</p><pre><code>server.port=2100spring.application.name=SERVICE-HELLOeureka.client.service-url.defaultZone=http://localhost:8260/eureka</code></pre><ol><li>server.port=2100 代表访问端口 </li><li>spring.application.name=SERVICE-HELLO 代表自己的服务名为SERVICE-HELLO</li><li>eureka.client.fetch-registry=false 注册中心不去检索服务</li><li>eureka.client.service-url.defaultZone=<a href="http://localhost:8260/eureka" target="_blank" rel="noopener">http://localhost:8260/eureka</a> 代表客户端去这个位置注册服务</li></ol><h3 id="3-在启动springboot-服务端和客户端在浏览器中输入"><a href="#3-在启动springboot-服务端和客户端在浏览器中输入" class="headerlink" title="3.在启动springboot 服务端和客户端在浏览器中输入"></a>3.在启动springboot 服务端和客户端在浏览器中输入</h3><pre><code>http://localhost:8260/ 就可以访问到注册中心中有SERVICE-HELLO 服务http://localhost:2100/hello 就直接访问 到 客户端的hello 端口</code></pre><h3 id="4。注意"><a href="#4。注意" class="headerlink" title="4。注意"></a>4。注意</h3><p>此时点击服务端注册中心网站连接是会报错的，观察跳转链接 <a href="http://localhost:2100/actuator/info" target="_blank" rel="noopener">http://localhost:2100/actuator/info</a><br>在客户端加上</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><p>在application.properties添加上就可以正常访问</p><pre><code># 添加所有的actuatormanagement.endpoints.web.exposure.include=*management.endpoints.web.exposure.exclude=env,beans</code></pre><h3 id="5-备注"><a href="#5-备注" class="headerlink" title="5.备注"></a>5.备注</h3><p>最后祝大家成功</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/06/05/SpringCloud%20%E9%85%8D%E7%BD%AE%20eureka-client%20%EF%BC%88sprinboot2.0.1%E7%8E%AF%E5%A2%83%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>tomcat8配置管理员</title>
      <link>http://yoursite.com/2018/06/05/tomcat8%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E5%91%98/</link>
      <guid>http://yoursite.com/2018/06/05/tomcat8%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E5%91%98/</guid>
      <pubDate>Tue, 05 Jun 2018 11:23:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;tomcat8配置管理员&quot;&gt;&lt;a href=&quot;#tomcat8配置管理员&quot; class=&quot;headerlink&quot; title=&quot;tomcat8配置管理员&quot;&gt;&lt;/a&gt;tomcat8配置管理员&lt;/h1&gt;&lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="tomcat8配置管理员"><a href="#tomcat8配置管理员" class="headerlink" title="tomcat8配置管理员"></a>tomcat8配置管理员</h1><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>（1）要使用localhost:8080/manager  需要配置/home/tomcat/apache-tomcat-8.5.29/conftomcat_user.xml在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;tomcat-users&gt;</span><br><span class="line">&lt;/tomcat-users&gt;</span><br></pre></td></tr></table></figure></p><p>标签中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;role rolename=&quot;manager&quot;/&gt;    </span><br><span class="line">&lt;role rolename=&quot;manager-gui&quot;/&gt;    </span><br><span class="line">&lt;role rolename=&quot;admin&quot;/&gt;    </span><br><span class="line">&lt;role rolename=&quot;admin-gui&quot;/&gt;    </span><br><span class="line">&lt;role rolename=&quot;manager-script&quot;/&gt;    </span><br><span class="line">&lt;role rolename=&quot;manager-jmx&quot;/&gt;    </span><br><span class="line">&lt;role rolename=&quot;manager-status&quot;/&gt;    </span><br><span class="line">&lt;user username=&quot;admin&quot; password=&quot;password&quot; roles=&quot;admin-gui,admin,manager-gui,manager,manager-script,manager-jmx,manager-status&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>之后重启点击Manager App 还是会报错</p><p>（2）在tomat_home/conf/Catalina/localhost/下  添加manager.xml</p><p>配置远程访问manager：</p><p>在tomat_home/conf/Catalina/localhost/下  添加manager.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Context privileged=&quot;true&quot; antiResourceLocking=&quot;false&quot;   </span><br><span class="line">         docBase=&quot;$&#123;catalina.home&#125;/webapps/manager&quot;&gt;  </span><br><span class="line">             &lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;^.*$&quot; /&gt;  </span><br><span class="line">&lt;/Context&gt;</span><br></pre></td></tr></table></figure><p>（3）之后点击Manager App 输入 账号密码： admin  password ,进入到管理界面<br>在下面有一个选择文件，选择你要部署的war之后，按deploy之后稍等一会，等文件上传完成后，就会部署成功，整个过程不用重启tomcat。</p><p>（4）取消部署<br>当部署之后，由于一些原因你不想部署，可以在对应的部署应用后面 按undeploy，<br>tomcat就会自动删除weapps目录下war和解压后的文件。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/06/05/tomcat8%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E5%91%98/#disqus_thread</comments>
    </item>
    
    <item>
      <title>word转pdf (Centors环境下)</title>
      <link>http://yoursite.com/2018/06/05/word%E8%BD%ACpdf%20(Centors%E7%8E%AF%E5%A2%83%E4%B8%8B)/</link>
      <guid>http://yoursite.com/2018/06/05/word%E8%BD%ACpdf%20(Centors%E7%8E%AF%E5%A2%83%E4%B8%8B)/</guid>
      <pubDate>Tue, 05 Jun 2018 11:23:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;word转pdf-Centors环境下&quot;&gt;&lt;a href=&quot;#word转pdf-Centors环境下&quot; class=&quot;headerlink&quot; title=&quot;word转pdf (Centors环境下)&quot;&gt;&lt;/a&gt;word转pdf (Centors环境下)&lt;/h1&gt;&lt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="word转pdf-Centors环境下"><a href="#word转pdf-Centors环境下" class="headerlink" title="word转pdf (Centors环境下)"></a>word转pdf (Centors环境下)</h1><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h3><p>最近在做网上打印系统，需要计算用户上传文件的页数计算价格，主要文档格式有pdf,txt,doc,docx<br>    （1）对于PDF比较简单直接用api 操作得到页数 准确率挺高的测了很多都对<br>    Maven导包：</p><pre><code>&lt;dependency&gt;  &lt;groupId&gt;org.apache.pdfbox&lt;/groupId&gt;  &lt;artifactId&gt;pdfbox&lt;/artifactId&gt;  &lt;version&gt;2.0.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.apache.pdfbox&lt;/groupId&gt;  &lt;artifactId&gt;fontbox&lt;/artifactId&gt;  &lt;version&gt;2.0.1&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>代码：</p><pre><code>  public static void main(String args[]) throws IOException {        String file1 = &quot;C:\\Users\\win10\\Desktop\\书本\\pdf\\Java编程思想第四版完整中文高清版.pdf&quot;; //        String file2 = &quot;C:\\Users\\win10\\Desktop\\书本\\pdf\\阿里巴巴Java开发手册（纪念版）.pdf&quot;; //        String file3 = &quot;I:\\高代\\高等代数下（复习）-chenqh.pdf&quot;; // 4        File pdfFile = new File(file3);        PDDocument document = null;        try        {            // 方式一：            /**             InputStream input = null;             input = new FileInputStream( pdfFile );             //加载 pdf 文档             PDFParser parser = new PDFParser(new RandomAccessBuffer(input));             parser.parse();             document = parser.getPDDocument();             **/            // 方式二：            document=PDDocument.load(pdfFile);            // 获取页码            int pages = document.getNumberOfPages();            System.out.println(pages);//            // 读文本内容//            PDFTextStripper stripper=new PDFTextStripper();//            // 设置按顺序输出//            stripper.setSortByPosition(true);//            stripper.setStartPage(1);//            stripper.setEndPage(pages);//            String content = stripper.getText(document);//            System.out.println(content);        }        catch(Exception e)        {            System.out.println(e);        }finally {            document.close();        }    }</code></pre><p>（2）对于txt,doc,docx这类文档虽然可以用poi操作读取页数   这个准确率相信也有同学测过，准确率可能就50-60%左右吧，对于设置价格误差太大，不适合。<br>但我还是说一下吧，有空的同学可以逛逛<br>    maven导包</p><pre><code>&lt;dependency&gt;   &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;   &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;   &lt;version&gt;3.17&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;   &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;   &lt;artifactId&gt;poi-scratchpad&lt;/artifactId&gt;   &lt;version&gt;3.17&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;   &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;   &lt;artifactId&gt;poi&lt;/artifactId&gt;   &lt;version&gt;3.17&lt;/version&gt; &lt;/dependency&gt;</code></pre><p>代码：</p><pre><code>   public static void main(String[] args) throws Exception {    // TODO code application logic here  // parse2007();    parse97();}// docx文档public static void parse2007()  throws Exception {    String fileName1 = &quot;D:\\count\\软1-新生班导工作计划.docx&quot;;  // 2  OK    String fileName2 = &quot;D:\\count\\软3-新生班导工作计划.docx&quot;;  // 2  OK    String fileName3 = &quot;D:\\count\\软4-新生班导工作计划.docx&quot;;  // 2  OK    String fileName4 = &quot;D:\\count\\数2-新生班导工作计划.docx&quot;;  // x1   4    String fileName5 = &quot;D:\\count\\数3-新生班导工作计划.docx&quot;;  // 3   OK    String fileName6 = &quot;D:\\count\\信安-新生班导工作计划.docx&quot;;  //x1   5    XWPFDocument docx = new XWPFDocument(POIXMLDocument.openPackage(fileName6));    int pages = docx.getProperties().getExtendedProperties().getUnderlyingProperties().getPages();//总页数    int wordCount = docx.getProperties().getExtendedProperties().getUnderlyingProperties().getCharacters();// 忽略空格的总字符数 另外还有getCharactersWithSpaces()方法获取带空格的总字数。    System.out.println (&quot;pages=&quot; + pages + &quot; wordCount=&quot; + wordCount);}// doc 文档public static void parse97()  throws Exception {    String fileName1 = &quot;D:\\count\\福州大学本科生科研训练计划（SRTP）项目申请表（2018年创新类） (1).doc&quot;; // 11 OK    String fileName2 = &quot;D:\\count\\软2-新生班导工作计划.doc&quot;;   // 7 ok    String fileName3 = &quot;D:\\count\\数1-新生班导工作计划.doc&quot;;   // x1  4    WordExtractor doc = new WordExtractor(new FileInputStream(fileName2));    int pages = doc.getSummaryInformation().getPageCount();//总页数    int wordCount = doc.getSummaryInformation().getWordCount();//总字符数    System.out.println (&quot;pages=&quot; + pages + &quot; wordCount=&quot; + wordCount);}</code></pre><h3 id="2-转变思想"><a href="#2-转变思想" class="headerlink" title="2.转变思想"></a>2.转变思想</h3><p>对于pdf可以精准的计算出页数，剩下的就是doc，doxc，ppt博主在网上搜了一大堆资料，方法各异最后我总结出一种最简便高效，且转换后还原度非常高的方法，最重要的是跨平台，接下来就分享给大家。<br>（1）在linux 上装 unoconv </p><pre><code>yum install unoconv</code></pre><p>   然后 </p><pre><code>unoconv -help</code></pre><p>   查看是否安装成功<br>(2)    现在就可以通过linux命令 </p><pre><code>unoconv -f pdf /home/a.docunoconv -f pdf /home/a.docxunoconv -f pdf /home/a.txt</code></pre><p>把这三类文件转为pdf且效率高</p><p>（3）<br>对含有中文的文件会出现乱码问题<br>解决方法：</p><pre><code>yum groupinstall chinese-support //安装中文支持vim /etc/sysconfig/i18n   //修改编码文件添加 没有就创建一个添加下面三行（locale  可以查看编码）LANG=”zh_CN.GB18030″SUPPORTED=”zh_CN.UTF-8:zh_CN:zh:en_US.UTF-8:en_US:en”SYSFONT=”latarcyrheb-sun16″vim /etc/vimrc 修改文件在文件最后添加下面两行set fileencoding=utf-8set fileencodings=utf-8,gb18030,gbk,big5保存修改reboot 重启服务器首先，在D:盘创建一个文件夹win 进入C:\WINDOWS\Fonts把此文件夹下的所以字体复制 到D:\win 由于win文件夹比较大，进行打包 win.zip //解压  unzip win.zip  mv win /usr/share/fonts  cd /usr/share/fonts/win  chmod  -Rf 755 Fonts  //加载字体  mkfontscale  如果没有这个命令 就yum install mkfontscalemkfontdir  如果没有这个命令 就yum install mkfontdirfc-cache –fv  reboot 重启服务器如果启动后转文件出现 段错误或者Segmentation fault或者Error: Unable to connect or start own listener. Aborting.重启一下服务器就ok了</code></pre><p>接下来就是用java 操作一下linux命令行 把目标文件转为pdf<br>最后用pdf计算页数最后计算出结果</p><p>下一篇博客讲解如何用java操作linux </p><p>备注：<br>  祝各位同学成功。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/06/05/word%E8%BD%ACpdf%20(Centors%E7%8E%AF%E5%A2%83%E4%B8%8B)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Centors tomcat启动慢解决方法</title>
      <link>http://yoursite.com/2018/06/05/Centors-tomcat%E5%90%AF%E5%8A%A8%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
      <guid>http://yoursite.com/2018/06/05/Centors-tomcat%E5%90%AF%E5%8A%A8%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
      <pubDate>Tue, 05 Jun 2018 11:15:12 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Centors-tomcat启动慢解决方法&quot;&gt;&lt;a href=&quot;#Centors-tomcat启动慢解决方法&quot; class=&quot;headerlink&quot; title=&quot;Centors tomcat启动慢解决方法&quot;&gt;&lt;/a&gt;Centors tomcat启动慢解决方法&lt;/
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Centors-tomcat启动慢解决方法"><a href="#Centors-tomcat启动慢解决方法" class="headerlink" title="Centors tomcat启动慢解决方法"></a>Centors tomcat启动慢解决方法</h1><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>Tomcat 7/8都使用org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom类产生安全随机类SecureRandom的实例作为会话ID，这里花去了342秒，也即接近6分钟。SHA1PRNG算法是基于SHA-1算法实现且保密性较强的伪随机数生成器。<br>在SHA1PRNG中，有一个种子产生器，它根据配置执行各种操作。</p><p>（1）如果java.security.egd属性或securerandom.source属性指定的是”file:/dev/random”或”file:/dev/urandom”，那么JVM会使用本地种子产生器NativeSeedGenerator，它会调用super()方法，即调用SeedGenerator.URLSeedGenerator(/dev/random)方法进行初始化。</p><p>（2）如果java.security.egd属性或securerandom.source属性指定的是其它已存在的URL，那么会调用SeedGenerator.URLSeedGenerator(url)方法进行初始化。</p><p>这就是为什么我们设置值为”file:///dev/urandom”或者值为”file:/./dev/random”都会起作用的原因。</p><p>在这个实现中，产生器会评估熵池（entropy pool）中的噪声数量。随机数是从熵池中进行创建的。当读操作时，/dev/random设备会只返回熵池中噪声的随机字节。/dev/random非常适合那些需要非常高质量随机性的场景，比如一次性的支付或生成密钥的场景。</p><p>当熵池为空时，来自/dev/random的读操作将被阻塞，直到熵池收集到足够的环境噪声数据。这么做的目的是成为一个密码安全的伪随机数发生器，熵池要有尽可能大的输出。对于生成高质量的加密密钥或者是需要长期保护的场景，一定要这么做。</p><p>那么什么是环境噪声？</p><p>随机数产生器会手机来自设备驱动器和其它源的环境噪声数据，并放入熵池中。产生器会评估熵池中的噪声数据的数量。当熵池为空时，这个噪声数据的收集是比较花时间的。这就意味着，Tomcat在生产环境中使用熵池时，会被阻塞较长的时间。</p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>（1）在Tomcat环境中解决</p><p>可以通过配置JRE使用非阻塞的Entropy Source。</p><p>在catalina.sh中加入这么一行：</p><pre><code>-Djava.security.egd=file:/dev/./urandom 即可。</code></pre><p>加入后再启动Tomcat，整个启动耗时下降到Server startup in 2912 ms。</p><p>（2）在JVM环境中解决</p><p>打开$JAVA_PATH/jre/lib/security/java.security这个文件，找到下面的内容：</p><pre><code>securerandom.source=file:/dev/random</code></pre><p>改成</p><pre><code>securerandom.source=file:/dev/./urandom</code></pre><p>然后你会发现tomact启动速度起飞</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/06/05/Centors-tomcat%E5%90%AF%E5%8A%A8%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
