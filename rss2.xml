<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cy</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Wed, 25 Jul 2018 13:18:24 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>SpringCloud 配置 eureka-server （sprinboot2.0.1环境）</title>
      <link>http://yoursite.com/2018/06/05/SpringCloud%20%E9%85%8D%E7%BD%AE%20eureka-server%20%EF%BC%88sprinboot2.0.1%E7%8E%AF%E5%A2%83%EF%BC%89/</link>
      <guid>http://yoursite.com/2018/06/05/SpringCloud%20%E9%85%8D%E7%BD%AE%20eureka-server%20%EF%BC%88sprinboot2.0.1%E7%8E%AF%E5%A2%83%EF%BC%89/</guid>
      <pubDate>Tue, 05 Jun 2018 11:23:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;SpringCloud-配置-eureka-server-（sprinboot2-0-1环境）&quot;&gt;&lt;a href=&quot;#SpringCloud-配置-eureka-server-（sprinboot2-0-1环境）&quot; class=&quot;headerlink&quot; title
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="SpringCloud-配置-eureka-server-（sprinboot2-0-1环境）"><a href="#SpringCloud-配置-eureka-server-（sprinboot2-0-1环境）" class="headerlink" title="SpringCloud 配置 eureka-server （sprinboot2.0.1环境）"></a>SpringCloud 配置 eureka-server （sprinboot2.0.1环境）</h1><h3 id="1-Maven导入包"><a href="#1-Maven导入包" class="headerlink" title="1.Maven导入包"></a>1.Maven导入包</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;groupId&gt;com.example&lt;/groupId&gt;&lt;artifactId&gt;demo&lt;/artifactId&gt;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&lt;packaging&gt;jar&lt;/packaging&gt;&lt;name&gt;demo&lt;/name&gt;&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;&lt;parent&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;    &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&lt;/parent&gt;&lt;properties&gt;    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;    &lt;java.version&gt;1.8&lt;/java.version&gt;    &lt;spring-cloud.version&gt;Finchley.RELEASE&lt;/spring-cloud.version&gt;&lt;/properties&gt;&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;        &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;&lt;repositories&gt;    &lt;repository&gt;        &lt;id&gt;spring-snapshots&lt;/id&gt;        &lt;name&gt;Spring Snapshots&lt;/name&gt;        &lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;        &lt;snapshots&gt;            &lt;enabled&gt;true&lt;/enabled&gt;        &lt;/snapshots&gt;    &lt;/repository&gt;    &lt;repository&gt;        &lt;id&gt;spring-milestones&lt;/id&gt;        &lt;name&gt;Spring Milestones&lt;/name&gt;        &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;        &lt;snapshots&gt;            &lt;enabled&gt;false&lt;/enabled&gt;        &lt;/snapshots&gt;    &lt;/repository&gt;&lt;/repositories&gt;&lt;dependencyManagement&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;            &lt;version&gt;${spring-cloud.version}&lt;/version&gt;            &lt;type&gt;pom&lt;/type&gt;            &lt;scope&gt;import&lt;/scope&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;build&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;</code></pre><p></p><p>其中 这部分代码很关键 在按SpringCloud微服务实战中 那样去配置项目在springboot2.0以上版本跑不起来需要添加下面的代码</p><pre><code>&lt;repositories&gt;    &lt;repository&gt;        &lt;id&gt;spring-snapshots&lt;/id&gt;        &lt;name&gt;Spring Snapshots&lt;/name&gt;        &lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;        &lt;snapshots&gt;            &lt;enabled&gt;true&lt;/enabled&gt;        &lt;/snapshots&gt;    &lt;/repository&gt;    &lt;repository&gt;        &lt;id&gt;spring-milestones&lt;/id&gt;        &lt;name&gt;Spring Milestones&lt;/name&gt;        &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;        &lt;snapshots&gt;            &lt;enabled&gt;false&lt;/enabled&gt;        &lt;/snapshots&gt;    &lt;/repository&gt;&lt;/repositories&gt;</code></pre><h3 id="2-在启动类加上注解-EnableEurekaServer"><a href="#2-在启动类加上注解-EnableEurekaServer" class="headerlink" title="2.在启动类加上注解@EnableEurekaServer"></a>2.在启动类加上注解@EnableEurekaServer</h3><pre><code>@EnableEurekaServer@SpringBootApplicationpublic class DemoApplication {    public static void main(String[] args) {        SpringApplication.run(DemoApplication.class, args);    }}</code></pre><h3 id="3-在application-properties"><a href="#3-在application-properties" class="headerlink" title="3.在application.properties"></a>3.在application.properties</h3><p>添加以下代码</p><pre><code>server.port=8260eureka.instance.hostname=localhosteureka.client.register-with-eureka=falseeureka.client.fetch-registry=falseeureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka</code></pre><ol><li>server.port=8260 代表访问端口 </li><li>eureka.client.register-with-eureka=false 代表不注册自己</li><li>eureka.client.fetch-registry=false 注册中心不去检索服务</li><li>eureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka 访问地址</li><li>eureka.instance.hostname=localhost 代表本地</li></ol><h3 id="3-在启动springboot在浏览器中输入"><a href="#3-在启动springboot在浏览器中输入" class="headerlink" title="3.在启动springboot在浏览器中输入"></a>3.在启动springboot在浏览器中输入</h3><pre><code>http://localhost:1111/ 就可以访问</code></pre><h3 id="4-备注"><a href="#4-备注" class="headerlink" title="4.备注"></a>4.备注</h3><p>博主踩了大半天的坑最终通过这个方法实现了希望能帮到一些初学者</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/06/05/SpringCloud%20%E9%85%8D%E7%BD%AE%20eureka-server%20%EF%BC%88sprinboot2.0.1%E7%8E%AF%E5%A2%83%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>tomcat8配置管理员</title>
      <link>http://yoursite.com/2018/06/05/tomcat8%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E5%91%98/</link>
      <guid>http://yoursite.com/2018/06/05/tomcat8%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E5%91%98/</guid>
      <pubDate>Tue, 05 Jun 2018 11:23:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;tomcat8配置管理员&quot;&gt;&lt;a href=&quot;#tomcat8配置管理员&quot; class=&quot;headerlink&quot; title=&quot;tomcat8配置管理员&quot;&gt;&lt;/a&gt;tomcat8配置管理员&lt;/h1&gt;&lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="tomcat8配置管理员"><a href="#tomcat8配置管理员" class="headerlink" title="tomcat8配置管理员"></a>tomcat8配置管理员</h1><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>（1）要使用localhost:8080/manager  需要配置/home/tomcat/apache-tomcat-8.5.29/conftomcat_user.xml在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;tomcat-users&gt;</span><br><span class="line">&lt;/tomcat-users&gt;</span><br></pre></td></tr></table></figure></p><p>标签中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;role rolename=&quot;manager&quot;/&gt;    </span><br><span class="line">&lt;role rolename=&quot;manager-gui&quot;/&gt;    </span><br><span class="line">&lt;role rolename=&quot;admin&quot;/&gt;    </span><br><span class="line">&lt;role rolename=&quot;admin-gui&quot;/&gt;    </span><br><span class="line">&lt;role rolename=&quot;manager-script&quot;/&gt;    </span><br><span class="line">&lt;role rolename=&quot;manager-jmx&quot;/&gt;    </span><br><span class="line">&lt;role rolename=&quot;manager-status&quot;/&gt;    </span><br><span class="line">&lt;user username=&quot;admin&quot; password=&quot;password&quot; roles=&quot;admin-gui,admin,manager-gui,manager,manager-script,manager-jmx,manager-status&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>之后重启点击Manager App 还是会报错</p><p>（2）在tomat_home/conf/Catalina/localhost/下  添加manager.xml</p><p>配置远程访问manager：</p><p>在tomat_home/conf/Catalina/localhost/下  添加manager.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Context privileged=&quot;true&quot; antiResourceLocking=&quot;false&quot;   </span><br><span class="line">         docBase=&quot;$&#123;catalina.home&#125;/webapps/manager&quot;&gt;  </span><br><span class="line">             &lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;^.*$&quot; /&gt;  </span><br><span class="line">&lt;/Context&gt;</span><br></pre></td></tr></table></figure><p>（3）之后点击Manager App 输入 账号密码： admin  password ,进入到管理界面<br>在下面有一个选择文件，选择你要部署的war之后，按deploy之后稍等一会，等文件上传完成后，就会部署成功，整个过程不用重启tomcat。</p><p>（4）取消部署<br>当部署之后，由于一些原因你不想部署，可以在对应的部署应用后面 按undeploy，<br>tomcat就会自动删除weapps目录下war和解压后的文件。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/06/05/tomcat8%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E5%91%98/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Centors tomcat启动慢解决方法</title>
      <link>http://yoursite.com/2018/06/05/Centors-tomcat%E5%90%AF%E5%8A%A8%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
      <guid>http://yoursite.com/2018/06/05/Centors-tomcat%E5%90%AF%E5%8A%A8%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
      <pubDate>Tue, 05 Jun 2018 11:15:12 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Centors-tomcat启动慢解决方法&quot;&gt;&lt;a href=&quot;#Centors-tomcat启动慢解决方法&quot; class=&quot;headerlink&quot; title=&quot;Centors tomcat启动慢解决方法&quot;&gt;&lt;/a&gt;Centors tomcat启动慢解决方法&lt;/
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Centors-tomcat启动慢解决方法"><a href="#Centors-tomcat启动慢解决方法" class="headerlink" title="Centors tomcat启动慢解决方法"></a>Centors tomcat启动慢解决方法</h1><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>Tomcat 7/8都使用org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom类产生安全随机类SecureRandom的实例作为会话ID，这里花去了342秒，也即接近6分钟。SHA1PRNG算法是基于SHA-1算法实现且保密性较强的伪随机数生成器。<br>在SHA1PRNG中，有一个种子产生器，它根据配置执行各种操作。</p><p>（1）如果java.security.egd属性或securerandom.source属性指定的是”file:/dev/random”或”file:/dev/urandom”，那么JVM会使用本地种子产生器NativeSeedGenerator，它会调用super()方法，即调用SeedGenerator.URLSeedGenerator(/dev/random)方法进行初始化。</p><p>（2）如果java.security.egd属性或securerandom.source属性指定的是其它已存在的URL，那么会调用SeedGenerator.URLSeedGenerator(url)方法进行初始化。</p><p>这就是为什么我们设置值为”file:///dev/urandom”或者值为”file:/./dev/random”都会起作用的原因。</p><p>在这个实现中，产生器会评估熵池（entropy pool）中的噪声数量。随机数是从熵池中进行创建的。当读操作时，/dev/random设备会只返回熵池中噪声的随机字节。/dev/random非常适合那些需要非常高质量随机性的场景，比如一次性的支付或生成密钥的场景。</p><p>当熵池为空时，来自/dev/random的读操作将被阻塞，直到熵池收集到足够的环境噪声数据。这么做的目的是成为一个密码安全的伪随机数发生器，熵池要有尽可能大的输出。对于生成高质量的加密密钥或者是需要长期保护的场景，一定要这么做。</p><p>那么什么是环境噪声？</p><p>随机数产生器会手机来自设备驱动器和其它源的环境噪声数据，并放入熵池中。产生器会评估熵池中的噪声数据的数量。当熵池为空时，这个噪声数据的收集是比较花时间的。这就意味着，Tomcat在生产环境中使用熵池时，会被阻塞较长的时间。</p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>（1）在Tomcat环境中解决</p><p>可以通过配置JRE使用非阻塞的Entropy Source。</p><p>在catalina.sh中加入这么一行：</p><pre><code>-Djava.security.egd=file:/dev/./urandom 即可。</code></pre><p>加入后再启动Tomcat，整个启动耗时下降到Server startup in 2912 ms。</p><p>（2）在JVM环境中解决</p><p>打开$JAVA_PATH/jre/lib/security/java.security这个文件，找到下面的内容：</p><pre><code>securerandom.source=file:/dev/random</code></pre><p>改成</p><pre><code>securerandom.source=file:/dev/./urandom</code></pre><p>然后你会发现tomact启动速度起飞</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/06/05/Centors-tomcat%E5%90%AF%E5%8A%A8%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ActiveMQ(点对点)</title>
      <link>http://yoursite.com/2018/05/18/ActiveMQ(%E7%82%B9%E5%AF%B9%E7%82%B9)/</link>
      <guid>http://yoursite.com/2018/05/18/ActiveMQ(%E7%82%B9%E5%AF%B9%E7%82%B9)/</guid>
      <pubDate>Fri, 18 May 2018 08:14:47 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;#ActiveMQ介绍&lt;br&gt;&amp;emsp;&amp;emsp;ActiveMQ是一种开源的，实现了JMS1.1规范的，面向消息(MOM)的中间件，为应用程序提供高效的、可扩展的、稳定的和安全的企业级消息通信。ActiveMQ使用Apache提供的授权，任何人都可以对其实现代码进行修
        
      
      </description>
      
      <content:encoded><![CDATA[<p>#ActiveMQ介绍<br>&emsp;&emsp;ActiveMQ是一种开源的，实现了JMS1.1规范的，面向消息(MOM)的中间件，为应用程序提供高效的、可扩展的、稳定的和安全的企业级消息通信。ActiveMQ使用Apache提供的授权，任何人都可以对其实现代码进行修改。<a href="http://activemq.apache.org/" target="_blank" rel="noopener">ActiveMQ官网</a></p><p>##ActiveMQ(一)</p><p>###点对点消息发布的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">package Activemq;</span><br><span class="line">import javax.jms.Connection;</span><br><span class="line">import javax.jms.ConnectionFactory;</span><br><span class="line">import javax.jms.Destination;</span><br><span class="line">import javax.jms.JMSException;</span><br><span class="line">import javax.jms.MessageProducer;</span><br><span class="line">import javax.jms.Session;</span><br><span class="line">import javax.jms.TextMessage;</span><br><span class="line"></span><br><span class="line">import org.apache.activemq.ActiveMQConnection;</span><br><span class="line">import org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 消息生产者</span><br><span class="line"> * @author Administrator</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class JMSProducer &#123;</span><br><span class="line"></span><br><span class="line">private static final String USERNAME=ActiveMQConnection.DEFAULT_USER; // 默认的连接用户名</span><br><span class="line">private static final String PASSWORD=ActiveMQConnection.DEFAULT_PASSWORD; // 默认的连接密码</span><br><span class="line">private static final String BROKEURL=ActiveMQConnection.DEFAULT_BROKER_URL; // 默认的连接地址</span><br><span class="line">private static final int SENDNUM=10; // 发送的消息数量</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">ConnectionFactory connectionFactory; // 连接工厂</span><br><span class="line">Connection connection = null; // 连接</span><br><span class="line">Session session; // 会话 接受或者发送消息的线程</span><br><span class="line">Destination destination; // 消息的目的地</span><br><span class="line">MessageProducer messageProducer; // 消息生产者</span><br><span class="line"></span><br><span class="line">// 实例化连接工厂</span><br><span class="line">connectionFactory=new ActiveMQConnectionFactory(JMSProducer.USERNAME, JMSProducer.PASSWORD, JMSProducer.BROKEURL);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">connection=connectionFactory.createConnection(); // 通过连接工厂获取连接</span><br><span class="line">connection.start(); // 启动连接</span><br><span class="line">session=connection.createSession(Boolean.TRUE, Session.AUTO_ACKNOWLEDGE); // 创建Session</span><br><span class="line">destination=session.createQueue(&quot;FirstQueue1&quot;); // 创建消息队列</span><br><span class="line">messageProducer=session.createProducer(destination); // 创建消息生产者</span><br><span class="line">sendMessage(session, messageProducer); // 发送消息</span><br><span class="line">session.commit();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally&#123;</span><br><span class="line">if(connection!=null)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">connection.close();</span><br><span class="line">&#125; catch (JMSException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 发送消息</span><br><span class="line"> * @param session</span><br><span class="line"> * @param messageProducer</span><br><span class="line"> * @throws Exception</span><br><span class="line"> */</span><br><span class="line">public static void sendMessage(Session session,MessageProducer messageProducer)throws Exception&#123;</span><br><span class="line">for(int i=0;i&lt;JMSProducer.SENDNUM;i++)&#123;</span><br><span class="line">TextMessage message=session.createTextMessage(&quot;ActiveMQ 发送的消息&quot;+i);</span><br><span class="line">System.out.println(&quot;发送消息：&quot;+&quot;ActiveMQ 发送的消息&quot;+i);</span><br><span class="line">messageProducer.send(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">package Activemq;</span><br><span class="line">import javax.jms.Connection;</span><br><span class="line">import javax.jms.ConnectionFactory;</span><br><span class="line">import javax.jms.Destination;</span><br><span class="line">import javax.jms.JMSException;</span><br><span class="line">import javax.jms.MessageConsumer;</span><br><span class="line">import javax.jms.Session;</span><br><span class="line"></span><br><span class="line">import org.apache.activemq.ActiveMQConnection;</span><br><span class="line">import org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line">    </span><br><span class="line"> /**</span><br><span class="line"> * 消息消费者</span><br><span class="line"> * @author Administrator</span><br><span class="line"> *</span><br><span class="line">  */</span><br><span class="line">public class JMSConsumer2 &#123;</span><br><span class="line"></span><br><span class="line">private static final String USERNAME=ActiveMQConnection.DEFAULT_USER; // 默认的连接用户名</span><br><span class="line">private static final String PASSWORD=ActiveMQConnection.DEFAULT_PASSWORD; // 默认的连接密码</span><br><span class="line">private static final String BROKEURL=ActiveMQConnection.DEFAULT_BROKER_URL; // 默认的连接地址</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">ConnectionFactory connectionFactory; // 连接工厂</span><br><span class="line">Connection connection = null; // 连接</span><br><span class="line">Session session; // 会话 接受或者发送消息的线程</span><br><span class="line">Destination destination; // 消息的目的地</span><br><span class="line">MessageConsumer messageConsumer; // 消息的消费者</span><br><span class="line"></span><br><span class="line">// 实例化连接工厂</span><br><span class="line">connectionFactory=new ActiveMQConnectionFactory(JMSConsumer2.USERNAME, JMSConsumer2.PASSWORD, JMSConsumer2.BROKEURL);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">connection=connectionFactory.createConnection();  // 通过连接工厂获取连接</span><br><span class="line">connection.start(); // 启动连接</span><br><span class="line">session=connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE); // 创建Session</span><br><span class="line">destination=session.createQueue(&quot;FirstQueue1&quot;);  // 创建连接的消息队列</span><br><span class="line">messageConsumer=session.createConsumer(destination); // 创建消息消费者</span><br><span class="line">messageConsumer.setMessageListener(new Listener()); // 注册消息监听</span><br><span class="line">&#125; catch (JMSException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">package Activemq;</span><br><span class="line"></span><br><span class="line">import javax.jms.JMSException;</span><br><span class="line">import javax.jms.Message;</span><br><span class="line">import javax.jms.MessageListener;</span><br><span class="line">import javax.jms.TextMessage;</span><br><span class="line">/**</span><br><span class="line"> * 消息监听</span><br><span class="line"> * @author Administrator</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class Listener implements MessageListener&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onMessage(Message message) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">try &#123;</span><br><span class="line">System.out.println(&quot;收到的消息：&quot;+((TextMessage)message).getText());</span><br><span class="line">&#125; catch (JMSException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="备注"><a href="#备注" class="headerlink" title="备注:"></a><strong>备注:</strong></h3><p>&emsp;&emsp;先打开运行\bin\win64\activemq.bat（如果机器为32位就打开32位的文件夹）<br>然后在浏览器输入：<a href="http://127.0.0.1:8161/admin/index.jsp" target="_blank" rel="noopener">http://127.0.0.1:8161/admin/index.jsp</a><br>默认账号密码为：admin</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/05/18/ActiveMQ(%E7%82%B9%E5%AF%B9%E7%82%B9)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ActiveMQ(一对多)</title>
      <link>http://yoursite.com/2018/05/18/ActiveMQ(%E4%B8%80%E5%AF%B9%E5%A4%9A)%20/</link>
      <guid>http://yoursite.com/2018/05/18/ActiveMQ(%E4%B8%80%E5%AF%B9%E5%A4%9A)%20/</guid>
      <pubDate>Fri, 18 May 2018 07:47:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;#ActiveMQ介绍&lt;br&gt;&amp;emsp;&amp;emsp;ActiveMQ是一种开源的，实现了JMS1.1规范的，面向消息(MOM)的中间件，为应用程序提供高效的、可扩展的、稳定的和安全的企业级消息通信。ActiveMQ使用Apache提供的授权，任何人都可以对其实现代码进行修
        
      
      </description>
      
      <content:encoded><![CDATA[<p>#ActiveMQ介绍<br>&emsp;&emsp;ActiveMQ是一种开源的，实现了JMS1.1规范的，面向消息(MOM)的中间件，为应用程序提供高效的、可扩展的、稳定的和安全的企业级消息通信。ActiveMQ使用Apache提供的授权，任何人都可以对其实现代码进行修改。<a href="http://activemq.apache.org/" target="_blank" rel="noopener">ActiveMQ官网</a></p><p>##ActiveMQ(一)</p><p>###点对点消息发布的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">package Activemq2;</span><br><span class="line"></span><br><span class="line">import javax.jms.Connection;</span><br><span class="line">import javax.jms.ConnectionFactory;</span><br><span class="line">import javax.jms.Destination;</span><br><span class="line">import javax.jms.JMSException;</span><br><span class="line">import javax.jms.MessageProducer;</span><br><span class="line">import javax.jms.Session;</span><br><span class="line">import javax.jms.TextMessage;</span><br><span class="line"></span><br><span class="line">import org.apache.activemq.ActiveMQConnection;</span><br><span class="line">import org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 消息生产者-消息发布者</span><br><span class="line"> * @author Administrator</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class JMSProducer &#123;</span><br><span class="line"></span><br><span class="line">private static final String USERNAME=ActiveMQConnection.DEFAULT_USER; // 默认的连接用户名</span><br><span class="line">private static final String PASSWORD=ActiveMQConnection.DEFAULT_PASSWORD; // 默认的连接密码</span><br><span class="line">private static final String BROKEURL=ActiveMQConnection.DEFAULT_BROKER_URL; // 默认的连接地址</span><br><span class="line">private static final int SENDNUM=10; // 发送的消息数量</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">ConnectionFactory connectionFactory; // 连接工厂</span><br><span class="line">Connection connection = null; // 连接</span><br><span class="line">Session session; // 会话 接受或者发送消息的线程</span><br><span class="line">Destination destination; // 消息的目的地</span><br><span class="line">MessageProducer messageProducer; // 消息生产者</span><br><span class="line"></span><br><span class="line">// 实例化连接工厂</span><br><span class="line">connectionFactory=new ActiveMQConnectionFactory(JMSProducer.USERNAME, JMSProducer.PASSWORD, JMSProducer.BROKEURL);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">connection=connectionFactory.createConnection(); // 通过连接工厂获取连接</span><br><span class="line">connection.start(); // 启动连接</span><br><span class="line">session=connection.createSession(Boolean.TRUE, Session.AUTO_ACKNOWLEDGE); // 创建Session</span><br><span class="line">// destination=session.createQueue(&quot;FirstQueue1&quot;); // 创建消息队列</span><br><span class="line">destination=session.createTopic(&quot;FirstTopic1&quot;);</span><br><span class="line">messageProducer=session.createProducer(destination); // 创建消息生产者</span><br><span class="line">sendMessage(session, messageProducer); // 发送消息</span><br><span class="line">session.commit();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally&#123;</span><br><span class="line">if(connection!=null)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">connection.close();</span><br><span class="line">&#125; catch (JMSException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 发送消息</span><br><span class="line"> * @param session</span><br><span class="line"> * @param messageProducer</span><br><span class="line"> * @throws Exception</span><br><span class="line"> */</span><br><span class="line">public static void sendMessage(Session session,MessageProducer messageProducer)throws Exception&#123;</span><br><span class="line">for(int i=0;i&lt;JMSProducer.SENDNUM;i++)&#123;</span><br><span class="line">TextMessage message=session.createTextMessage(&quot;ActiveMQ 发送的消息&quot;+i);</span><br><span class="line">System.out.println(&quot;发送消息：&quot;+&quot;ActiveMQ 发布的消息&quot;+i);</span><br><span class="line">messageProducer.send(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package Activemq2;</span><br><span class="line">import javax.jms.Connection;</span><br><span class="line">import javax.jms.ConnectionFactory;</span><br><span class="line">import javax.jms.Destination;</span><br><span class="line">import javax.jms.JMSException;</span><br><span class="line">import javax.jms.MessageConsumer;</span><br><span class="line">import javax.jms.Session;</span><br><span class="line"></span><br><span class="line">import org.apache.activemq.ActiveMQConnection;</span><br><span class="line">import org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 消息消费者-消息订阅者一</span><br><span class="line"> * @author Administrator</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class JMSConsumer &#123;</span><br><span class="line"></span><br><span class="line">private static final String USERNAME=ActiveMQConnection.DEFAULT_USER; // 默认的连接用户名</span><br><span class="line">private static final String PASSWORD=ActiveMQConnection.DEFAULT_PASSWORD; // 默认的连接密码</span><br><span class="line">private static final String BROKEURL=ActiveMQConnection.DEFAULT_BROKER_URL; // 默认的连接地址</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">ConnectionFactory connectionFactory; // 连接工厂</span><br><span class="line">Connection connection = null; // 连接</span><br><span class="line">Session session; // 会话 接受或者发送消息的线程</span><br><span class="line">Destination destination; // 消息的目的地</span><br><span class="line">MessageConsumer messageConsumer; // 消息的消费者</span><br><span class="line"></span><br><span class="line">// 实例化连接工厂</span><br><span class="line">connectionFactory=new ActiveMQConnectionFactory(JMSConsumer.USERNAME, JMSConsumer.PASSWORD, JMSConsumer.BROKEURL);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">connection=connectionFactory.createConnection();  // 通过连接工厂获取连接</span><br><span class="line">connection.start(); // 启动连接</span><br><span class="line">session=connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE); // 创建Session</span><br><span class="line">// destination=session.createQueue(&quot;FirstQueue1&quot;);  // 创建连接的消息队列</span><br><span class="line">destination=session.createTopic(&quot;FirstTopic1&quot;);</span><br><span class="line">messageConsumer=session.createConsumer(destination); // 创建消息消费者</span><br><span class="line">messageConsumer.setMessageListener(new Listener()); // 注册消息监听</span><br><span class="line">&#125; catch (JMSException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package Activemq2;</span><br><span class="line"></span><br><span class="line">import javax.jms.Connection;</span><br><span class="line">import javax.jms.ConnectionFactory;</span><br><span class="line">import javax.jms.Destination;</span><br><span class="line">import javax.jms.JMSException;</span><br><span class="line">import javax.jms.MessageConsumer;</span><br><span class="line">import javax.jms.Session;</span><br><span class="line"></span><br><span class="line">import org.apache.activemq.ActiveMQConnection;</span><br><span class="line">import org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 消息消费者-消息订阅者二</span><br><span class="line"> * @author Administrator</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class JMSConsumer2 &#123;</span><br><span class="line"></span><br><span class="line">private static final String USERNAME=ActiveMQConnection.DEFAULT_USER; // 默认的连接用户名</span><br><span class="line">private static final String PASSWORD=ActiveMQConnection.DEFAULT_PASSWORD; // 默认的连接密码</span><br><span class="line">private static final String BROKEURL=ActiveMQConnection.DEFAULT_BROKER_URL; // 默认的连接地址</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">ConnectionFactory connectionFactory; // 连接工厂</span><br><span class="line">Connection connection = null; // 连接</span><br><span class="line">Session session; // 会话 接受或者发送消息的线程</span><br><span class="line">Destination destination; // 消息的目的地</span><br><span class="line">MessageConsumer messageConsumer; // 消息的消费者</span><br><span class="line"></span><br><span class="line">// 实例化连接工厂</span><br><span class="line">connectionFactory=new ActiveMQConnectionFactory(JMSConsumer2.USERNAME, JMSConsumer2.PASSWORD, JMSConsumer2.BROKEURL);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">connection=connectionFactory.createConnection();  // 通过连接工厂获取连接</span><br><span class="line">connection.start(); // 启动连接</span><br><span class="line">session=connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE); // 创建Session</span><br><span class="line">// destination=session.createQueue(&quot;FirstQueue1&quot;);  // 创建连接的消息队列</span><br><span class="line">destination=session.createTopic(&quot;FirstTopic1&quot;);</span><br><span class="line">messageConsumer=session.createConsumer(destination); // 创建消息消费者</span><br><span class="line">messageConsumer.setMessageListener(new Listener2()); // 注册消息监听</span><br><span class="line">&#125; catch (JMSException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package Activemq2;</span><br><span class="line"></span><br><span class="line">import javax.jms.JMSException;</span><br><span class="line">import javax.jms.Message;</span><br><span class="line">import javax.jms.MessageListener;</span><br><span class="line">import javax.jms.TextMessage;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 消息监听-订阅者一</span><br><span class="line"> * @author Administrator</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class Listener implements MessageListener&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onMessage(Message message) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">try &#123;</span><br><span class="line">System.out.println(&quot;订阅者一收到的消息：&quot;+((TextMessage)message).getText());</span><br><span class="line">&#125; catch (JMSException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package Activemq2;</span><br><span class="line"></span><br><span class="line">import javax.jms.JMSException;</span><br><span class="line">import javax.jms.Message;</span><br><span class="line">import javax.jms.MessageListener;</span><br><span class="line">import javax.jms.TextMessage;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 消息监听-订阅者二</span><br><span class="line"> * @author Administrator</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class Listener2 implements MessageListener&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onMessage(Message message) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">try &#123;</span><br><span class="line">System.out.println(&quot;订阅者二收到的消息：&quot;+((TextMessage)message).getText());</span><br><span class="line">&#125; catch (JMSException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="备注"><a href="#备注" class="headerlink" title="备注:"></a><strong>备注:</strong></h3><p>&emsp;&emsp;实现订阅消息的推送，一定是先开启消费者，所以程序运行的顺序是先开启两个消费者，然后在默认网站：<a href="http://127.0.0.1:8161/admin/index.jsp" target="_blank" rel="noopener">http://127.0.0.1:8161/admin/index.jsp</a><br>可以看到两个消费者，然后发送消息，分别可以在消费者的两个控制台看到输出。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/05/18/ActiveMQ(%E4%B8%80%E5%AF%B9%E5%A4%9A)%20/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
