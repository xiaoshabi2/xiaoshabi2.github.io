<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cy</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Thu, 17 May 2018 09:25:57 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>ActiveMQ(一对多)</title>
      <link>http://yoursite.com/2018/05/17/ActiveMQ(%E4%B8%80%E5%AF%B9%E5%A4%9A)%20/</link>
      <guid>http://yoursite.com/2018/05/17/ActiveMQ(%E4%B8%80%E5%AF%B9%E5%A4%9A)%20/</guid>
      <pubDate>Thu, 17 May 2018 09:09:44 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;#ActiveMQ介绍&lt;br&gt;&amp;emsp;&amp;emsp;ActiveMQ是一种开源的，实现了JMS1.1规范的，面向消息(MOM)的中间件，为应用程序提供高效的、可扩展的、稳定的和安全的企业级消息通信。ActiveMQ使用Apache提供的授权，任何人都可以对其实现代码进行修
        
      
      </description>
      
      <content:encoded><![CDATA[<p>#ActiveMQ介绍<br>&emsp;&emsp;ActiveMQ是一种开源的，实现了JMS1.1规范的，面向消息(MOM)的中间件，为应用程序提供高效的、可扩展的、稳定的和安全的企业级消息通信。ActiveMQ使用Apache提供的授权，任何人都可以对其实现代码进行修改。<a href="http://activemq.apache.org/" target="_blank" rel="noopener">ActiveMQ官网</a></p><p>##ActiveMQ(一)</p><p>###点对点消息发布的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">package Activemq2;</span><br><span class="line"></span><br><span class="line">import javax.jms.Connection;</span><br><span class="line">import javax.jms.ConnectionFactory;</span><br><span class="line">import javax.jms.Destination;</span><br><span class="line">import javax.jms.JMSException;</span><br><span class="line">import javax.jms.MessageProducer;</span><br><span class="line">import javax.jms.Session;</span><br><span class="line">import javax.jms.TextMessage;</span><br><span class="line"></span><br><span class="line">import org.apache.activemq.ActiveMQConnection;</span><br><span class="line">import org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 消息生产者-消息发布者</span><br><span class="line"> * @author Administrator</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class JMSProducer &#123;</span><br><span class="line"></span><br><span class="line">private static final String USERNAME=ActiveMQConnection.DEFAULT_USER; // 默认的连接用户名</span><br><span class="line">private static final String PASSWORD=ActiveMQConnection.DEFAULT_PASSWORD; // 默认的连接密码</span><br><span class="line">private static final String BROKEURL=ActiveMQConnection.DEFAULT_BROKER_URL; // 默认的连接地址</span><br><span class="line">private static final int SENDNUM=10; // 发送的消息数量</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">ConnectionFactory connectionFactory; // 连接工厂</span><br><span class="line">Connection connection = null; // 连接</span><br><span class="line">Session session; // 会话 接受或者发送消息的线程</span><br><span class="line">Destination destination; // 消息的目的地</span><br><span class="line">MessageProducer messageProducer; // 消息生产者</span><br><span class="line"></span><br><span class="line">// 实例化连接工厂</span><br><span class="line">connectionFactory=new ActiveMQConnectionFactory(JMSProducer.USERNAME, JMSProducer.PASSWORD, JMSProducer.BROKEURL);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">connection=connectionFactory.createConnection(); // 通过连接工厂获取连接</span><br><span class="line">connection.start(); // 启动连接</span><br><span class="line">session=connection.createSession(Boolean.TRUE, Session.AUTO_ACKNOWLEDGE); // 创建Session</span><br><span class="line">// destination=session.createQueue(&quot;FirstQueue1&quot;); // 创建消息队列</span><br><span class="line">destination=session.createTopic(&quot;FirstTopic1&quot;);</span><br><span class="line">messageProducer=session.createProducer(destination); // 创建消息生产者</span><br><span class="line">sendMessage(session, messageProducer); // 发送消息</span><br><span class="line">session.commit();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally&#123;</span><br><span class="line">if(connection!=null)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">connection.close();</span><br><span class="line">&#125; catch (JMSException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 发送消息</span><br><span class="line"> * @param session</span><br><span class="line"> * @param messageProducer</span><br><span class="line"> * @throws Exception</span><br><span class="line"> */</span><br><span class="line">public static void sendMessage(Session session,MessageProducer messageProducer)throws Exception&#123;</span><br><span class="line">for(int i=0;i&lt;JMSProducer.SENDNUM;i++)&#123;</span><br><span class="line">TextMessage message=session.createTextMessage(&quot;ActiveMQ 发送的消息&quot;+i);</span><br><span class="line">System.out.println(&quot;发送消息：&quot;+&quot;ActiveMQ 发布的消息&quot;+i);</span><br><span class="line">messageProducer.send(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package Activemq2;</span><br><span class="line"></span><br><span class="line">import javax.jms.Connection;</span><br><span class="line">import javax.jms.ConnectionFactory;</span><br><span class="line">import javax.jms.Destination;</span><br><span class="line">import javax.jms.JMSException;</span><br><span class="line">import javax.jms.MessageConsumer;</span><br><span class="line">import javax.jms.Session;</span><br><span class="line"></span><br><span class="line">import org.apache.activemq.ActiveMQConnection;</span><br><span class="line">import org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 消息消费者-消息订阅者一</span><br><span class="line"> * @author Administrator</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class JMSConsumer &#123;</span><br><span class="line"></span><br><span class="line">private static final String USERNAME=ActiveMQConnection.DEFAULT_USER; // 默认的连接用户名</span><br><span class="line">private static final String PASSWORD=ActiveMQConnection.DEFAULT_PASSWORD; // 默认的连接密码</span><br><span class="line">private static final String BROKEURL=ActiveMQConnection.DEFAULT_BROKER_URL; // 默认的连接地址</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">ConnectionFactory connectionFactory; // 连接工厂</span><br><span class="line">Connection connection = null; // 连接</span><br><span class="line">Session session; // 会话 接受或者发送消息的线程</span><br><span class="line">Destination destination; // 消息的目的地</span><br><span class="line">MessageConsumer messageConsumer; // 消息的消费者</span><br><span class="line"></span><br><span class="line">// 实例化连接工厂</span><br><span class="line">connectionFactory=new ActiveMQConnectionFactory(JMSConsumer.USERNAME, JMSConsumer.PASSWORD, JMSConsumer.BROKEURL);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">connection=connectionFactory.createConnection();  // 通过连接工厂获取连接</span><br><span class="line">connection.start(); // 启动连接</span><br><span class="line">session=connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE); // 创建Session</span><br><span class="line">// destination=session.createQueue(&quot;FirstQueue1&quot;);  // 创建连接的消息队列</span><br><span class="line">destination=session.createTopic(&quot;FirstTopic1&quot;);</span><br><span class="line">messageConsumer=session.createConsumer(destination); // 创建消息消费者</span><br><span class="line">messageConsumer.setMessageListener(new Listener()); // 注册消息监听</span><br><span class="line">&#125; catch (JMSException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>package Activemq2;</p><p>import javax.jms.Connection;<br>import javax.jms.ConnectionFactory;<br>import javax.jms.Destination;<br>import javax.jms.JMSException;<br>import javax.jms.MessageConsumer;<br>import javax.jms.Session;</p><p>import org.apache.activemq.ActiveMQConnection;<br>import org.apache.activemq.ActiveMQConnectionFactory;</p><p>/**</p><ul><li>消息消费者-消息订阅者二</li><li><p>@author Administrator<br><em></em>/<br>public class JMSConsumer2 {</p><p> private static final String USERNAME=ActiveMQConnection.DEFAULT_USER; // 默认的连接用户名<br> private static final String PASSWORD=ActiveMQConnection.DEFAULT_PASSWORD; // 默认的连接密码<br> private static final String BROKEURL=ActiveMQConnection.DEFAULT_BROKER_URL; // 默认的连接地址</p><p> public static void main(String[] args) {</p><pre><code>ConnectionFactory connectionFactory; // 连接工厂Connection connection = null; // 连接Session session; // 会话 接受或者发送消息的线程Destination destination; // 消息的目的地MessageConsumer messageConsumer; // 消息的消费者// 实例化连接工厂connectionFactory=new ActiveMQConnectionFactory(JMSConsumer2.USERNAME, JMSConsumer2.PASSWORD, JMSConsumer2.BROKEURL);try {    connection=connectionFactory.createConnection();  // 通过连接工厂获取连接    connection.start(); // 启动连接    session=connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE); // 创建Session    // destination=session.createQueue(&quot;FirstQueue1&quot;);  // 创建连接的消息队列    destination=session.createTopic(&quot;FirstTopic1&quot;);    messageConsumer=session.createConsumer(destination); // 创建消息消费者    messageConsumer.setMessageListener(new Listener2()); // 注册消息监听} catch (JMSException e) {    // TODO Auto-generated catch block    e.printStackTrace();}</code></pre><p> }<br>}</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">package Activemq2;</span><br><span class="line"></span><br><span class="line">import javax.jms.JMSException;</span><br><span class="line">import javax.jms.Message;</span><br><span class="line">import javax.jms.MessageListener;</span><br><span class="line">import javax.jms.TextMessage;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 消息监听-订阅者一</span><br><span class="line"> * @author Administrator</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class Listener implements MessageListener&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onMessage(Message message) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">try &#123;</span><br><span class="line">System.out.println(&quot;订阅者一收到的消息：&quot;+((TextMessage)message).getText());</span><br><span class="line">&#125; catch (JMSException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package Activemq2;</span><br><span class="line"></span><br><span class="line">import javax.jms.JMSException;</span><br><span class="line">import javax.jms.Message;</span><br><span class="line">import javax.jms.MessageListener;</span><br><span class="line">import javax.jms.TextMessage;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 消息监听-订阅者二</span><br><span class="line"> * @author Administrator</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class Listener2 implements MessageListener&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onMessage(Message message) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">try &#123;</span><br><span class="line">System.out.println(&quot;订阅者二收到的消息：&quot;+((TextMessage)message).getText());</span><br><span class="line">&#125; catch (JMSException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="备注"><a href="#备注" class="headerlink" title="备注:"></a><strong>备注:</strong></h3><p>&emsp;&emsp;实现订阅消息的推送，一定是先开启消费者，所以程序运行的顺序是先开启两个消费者，然后在默认网站：<a href="http://127.0.0.1:8161/admin/index.jsp，可以看到两个消费者，然后发送消息，分别可以在消费者的两个控制台看到输出。" target="_blank" rel="noopener">http://127.0.0.1:8161/admin/index.jsp，可以看到两个消费者，然后发送消息，分别可以在消费者的两个控制台看到输出。</a></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/05/17/ActiveMQ(%E4%B8%80%E5%AF%B9%E5%A4%9A)%20/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ActiveMQ(点对点)</title>
      <link>http://yoursite.com/2018/05/17/ActiveMQ(%E7%82%B9%E5%AF%B9%E7%82%B9)/</link>
      <guid>http://yoursite.com/2018/05/17/ActiveMQ(%E7%82%B9%E5%AF%B9%E7%82%B9)/</guid>
      <pubDate>Thu, 17 May 2018 09:07:01 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;#ActiveMQ介绍&lt;br&gt;&amp;emsp;&amp;emsp;ActiveMQ是一种开源的，实现了JMS1.1规范的，面向消息(MOM)的中间件，为应用程序提供高效的、可扩展的、稳定的和安全的企业级消息通信。ActiveMQ使用Apache提供的授权，任何人都可以对其实现代码进行修
        
      
      </description>
      
      <content:encoded><![CDATA[<p>#ActiveMQ介绍<br>&emsp;&emsp;ActiveMQ是一种开源的，实现了JMS1.1规范的，面向消息(MOM)的中间件，为应用程序提供高效的、可扩展的、稳定的和安全的企业级消息通信。ActiveMQ使用Apache提供的授权，任何人都可以对其实现代码进行修改。<a href="http://activemq.apache.org/" target="_blank" rel="noopener">ActiveMQ官网</a></p><p>##ActiveMQ(一)</p><p>###点对点消息发布的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">package Activemq;</span><br><span class="line">import javax.jms.Connection;</span><br><span class="line">import javax.jms.ConnectionFactory;</span><br><span class="line">import javax.jms.Destination;</span><br><span class="line">import javax.jms.JMSException;</span><br><span class="line">import javax.jms.MessageProducer;</span><br><span class="line">import javax.jms.Session;</span><br><span class="line">import javax.jms.TextMessage;</span><br><span class="line"></span><br><span class="line">import org.apache.activemq.ActiveMQConnection;</span><br><span class="line">import org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 消息生产者</span><br><span class="line"> * @author Administrator</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class JMSProducer &#123;</span><br><span class="line"></span><br><span class="line">private static final String USERNAME=ActiveMQConnection.DEFAULT_USER; // 默认的连接用户名</span><br><span class="line">private static final String PASSWORD=ActiveMQConnection.DEFAULT_PASSWORD; // 默认的连接密码</span><br><span class="line">private static final String BROKEURL=ActiveMQConnection.DEFAULT_BROKER_URL; // 默认的连接地址</span><br><span class="line">private static final int SENDNUM=10; // 发送的消息数量</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">ConnectionFactory connectionFactory; // 连接工厂</span><br><span class="line">Connection connection = null; // 连接</span><br><span class="line">Session session; // 会话 接受或者发送消息的线程</span><br><span class="line">Destination destination; // 消息的目的地</span><br><span class="line">MessageProducer messageProducer; // 消息生产者</span><br><span class="line"></span><br><span class="line">// 实例化连接工厂</span><br><span class="line">connectionFactory=new ActiveMQConnectionFactory(JMSProducer.USERNAME, JMSProducer.PASSWORD, JMSProducer.BROKEURL);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">connection=connectionFactory.createConnection(); // 通过连接工厂获取连接</span><br><span class="line">connection.start(); // 启动连接</span><br><span class="line">session=connection.createSession(Boolean.TRUE, Session.AUTO_ACKNOWLEDGE); // 创建Session</span><br><span class="line">destination=session.createQueue(&quot;FirstQueue1&quot;); // 创建消息队列</span><br><span class="line">messageProducer=session.createProducer(destination); // 创建消息生产者</span><br><span class="line">sendMessage(session, messageProducer); // 发送消息</span><br><span class="line">session.commit();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; finally&#123;</span><br><span class="line">if(connection!=null)&#123;</span><br><span class="line">try &#123;</span><br><span class="line">connection.close();</span><br><span class="line">&#125; catch (JMSException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 发送消息</span><br><span class="line"> * @param session</span><br><span class="line"> * @param messageProducer</span><br><span class="line"> * @throws Exception</span><br><span class="line"> */</span><br><span class="line">public static void sendMessage(Session session,MessageProducer messageProducer)throws Exception&#123;</span><br><span class="line">for(int i=0;i&lt;JMSProducer.SENDNUM;i++)&#123;</span><br><span class="line">TextMessage message=session.createTextMessage(&quot;ActiveMQ 发送的消息&quot;+i);</span><br><span class="line">System.out.println(&quot;发送消息：&quot;+&quot;ActiveMQ 发送的消息&quot;+i);</span><br><span class="line">messageProducer.send(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package Activemq;</span><br><span class="line">import javax.jms.Connection;</span><br><span class="line">import javax.jms.ConnectionFactory;</span><br><span class="line">import javax.jms.Destination;</span><br><span class="line">import javax.jms.JMSException;</span><br><span class="line">import javax.jms.MessageConsumer;</span><br><span class="line">import javax.jms.Session;</span><br><span class="line"></span><br><span class="line">import org.apache.activemq.ActiveMQConnection;</span><br><span class="line">import org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line">    </span><br><span class="line"> /**</span><br><span class="line"> * 消息消费者</span><br><span class="line"> * @author Administrator</span><br><span class="line"> *</span><br><span class="line">  */</span><br><span class="line">public class JMSConsumer2 &#123;</span><br><span class="line"></span><br><span class="line">private static final String USERNAME=ActiveMQConnection.DEFAULT_USER; // 默认的连接用户名</span><br><span class="line">private static final String PASSWORD=ActiveMQConnection.DEFAULT_PASSWORD; // 默认的连接密码</span><br><span class="line">private static final String BROKEURL=ActiveMQConnection.DEFAULT_BROKER_URL; // 默认的连接地址</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">ConnectionFactory connectionFactory; // 连接工厂</span><br><span class="line">Connection connection = null; // 连接</span><br><span class="line">Session session; // 会话 接受或者发送消息的线程</span><br><span class="line">Destination destination; // 消息的目的地</span><br><span class="line">MessageConsumer messageConsumer; // 消息的消费者</span><br><span class="line"></span><br><span class="line">// 实例化连接工厂</span><br><span class="line">connectionFactory=new ActiveMQConnectionFactory(JMSConsumer2.USERNAME, JMSConsumer2.PASSWORD, JMSConsumer2.BROKEURL);</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">connection=connectionFactory.createConnection();  // 通过连接工厂获取连接</span><br><span class="line">connection.start(); // 启动连接</span><br><span class="line">session=connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE); // 创建Session</span><br><span class="line">destination=session.createQueue(&quot;FirstQueue1&quot;);  // 创建连接的消息队列</span><br><span class="line">messageConsumer=session.createConsumer(destination); // 创建消息消费者</span><br><span class="line">messageConsumer.setMessageListener(new Listener()); // 注册消息监听</span><br><span class="line">&#125; catch (JMSException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p> package Activemq;</p><p>import javax.jms.JMSException;<br>import javax.jms.Message;<br>import javax.jms.MessageListener;<br>import javax.jms.TextMessage;<br>/**</p><ul><li>消息监听</li><li><p>@author Administrator<br><em></em>/<br>public class Listener implements MessageListener{</p><p> @Override<br> public void onMessage(Message message) {</p><pre><code>// TODO Auto-generated method stubtry {    System.out.println(&quot;收到的消息：&quot;+((TextMessage)message).getText());} catch (JMSException e) {    // TODO Auto-generated catch block    e.printStackTrace();}</code></pre><p> }</p></li></ul><p>}<br><code>`</code></p><h3 id="备注"><a href="#备注" class="headerlink" title="备注:"></a><strong>备注:</strong></h3><p>&emsp;&emsp;先打开运行\bin\win64\activemq.bat（如果机器为32位就打开32位的文件夹）<br>然后在浏览器输入：<a href="http://127.0.0.1:8161/admin/index.jsp" target="_blank" rel="noopener">http://127.0.0.1:8161/admin/index.jsp</a><br>默认账号密码为：admin</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/05/17/ActiveMQ(%E7%82%B9%E5%AF%B9%E7%82%B9)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>linux 安装java+msql+tomcat</title>
      <link>http://yoursite.com/2018/05/05/linux-%E5%AE%89%E8%A3%85java-msql-tomcat/</link>
      <guid>http://yoursite.com/2018/05/05/linux-%E5%AE%89%E8%A3%85java-msql-tomcat/</guid>
      <pubDate>Sat, 05 May 2018 07:34:04 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;linux-安装java-msql-tomcat&quot;&gt;&lt;a href=&quot;#linux-安装java-msql-tomcat&quot; class=&quot;headerlink&quot; title=&quot;linux 安装java+msql+tomcat&quot;&gt;&lt;/a&gt;linux 安装java+m
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="linux-安装java-msql-tomcat"><a href="#linux-安装java-msql-tomcat" class="headerlink" title="linux 安装java+msql+tomcat"></a>linux 安装java+msql+tomcat</h1><h3 id="环境的搭建"><a href="#环境的搭建" class="headerlink" title="环境的搭建"></a>环境的搭建</h3><p>&emsp;&emsp;1.阿里云购买服务器<a href="https://www.aliyun.com/?utm_medium=text&amp;utm_source=bdbrand&amp;utm_campaign=bdbrand&amp;utm_content=se_32492m" target="_blank" rel="noopener">阿里云</a>（学生经过实名认证之后能购买9.9包月的ESC服务器）<br>&emsp;&emsp;2.在安全组配置添加端口号(vsftp:21,ssh:22,tomcat:80,mysql:3306,1024-65535)(这一步很重要没在安全组添加的话下面所以的安装都会连接不上。博主也踩了好几次坑)<br>&emsp;&emsp;3.安装vsftp服务<a href="http://blog.java1234.com/blog/articles/307.html" target="_blank" rel="noopener">教程</a><br>&emsp;&emsp;4.安装jre<a href="http://blog.java1234.com/blog/articles/307.html" target="_blank" rel="noopener">教程</a><br>&emsp;&emsp;5.安装mysql<a href="http://blog.java1234.com/blog/articles/308.html" target="_blank" rel="noopener">教程</a><br>&emsp;&emsp;6.安装Tomcat<a href="http://blog.java1234.com/blog/articles/309.html" target="_blank" rel="noopener">教程</a></p><h3 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h3><p>  &emsp;&emsp;1.博主使用的是阿里云ESC Centors7服务器，亲测有效。<br>  &emsp;&emsp;2.在linux添加端口时如果出现<code>firewall is not running</code> 因为没有开启防火墙的原因，输入命令<code>systemctl start firewalld</code>，没有任何提示就说明防火墙开启成功。<br>  &emsp;&emsp;3.环境搭建成功后记得给作者点鼓励。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/05/05/linux-%E5%AE%89%E8%A3%85java-msql-tomcat/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo+Next+GithubPage 搭建博客</title>
      <link>http://yoursite.com/2018/05/04/Hexo-Next-GithubPage-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <guid>http://yoursite.com/2018/05/04/Hexo-Next-GithubPage-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      <pubDate>Fri, 04 May 2018 13:07:23 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Hexo-Next-GithubPage-搭建博客&quot;&gt;&lt;a href=&quot;#Hexo-Next-GithubPage-搭建博客&quot; class=&quot;headerlink&quot; title=&quot;Hexo+Next+GithubPage 搭建博客&quot;&gt;&lt;/a&gt;Hexo+Next+G
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Hexo-Next-GithubPage-搭建博客"><a href="#Hexo-Next-GithubPage-搭建博客" class="headerlink" title="Hexo+Next+GithubPage 搭建博客"></a>Hexo+Next+GithubPage 搭建博客</h1><h3 id="搭建方法"><a href="#搭建方法" class="headerlink" title="搭建方法:"></a><strong>搭建方法:</strong></h3><p>网站上有很多建站的方法：<br>&emsp;&emsp;1.<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo + GitHub Pages</a><br>&emsp;&emsp;2.<a href="http://jekyll.com.cn/" target="_blank" rel="noopener">Jekyll + GitHub Pages</a><br>&emsp;&emsp;3.<a href="https://cn.wordpress.org/" target="_blank" rel="noopener">WordPress + 服务器 + 域名</a><br>&emsp;&emsp;4.<a href="http://www.dedecms.com/" target="_blank" rel="noopener">DeDeCMS + 服务器 + 域名</a></p><h3 id="Hexo-GitHub-Pages-建站的优点"><a href="#Hexo-GitHub-Pages-建站的优点" class="headerlink" title="Hexo + GitHub Pages 建站的优点"></a><strong>Hexo + GitHub Pages 建站的优点</strong></h3><p>&emsp;&emsp;1.GitHub Pages 无需购置服务器，免服务器费的同时还能做负载均衡，github pages有300M免费空间<br>&emsp;&emsp;2.通过 Hexo 你可以轻松地使用 Markdown 编写文章，简单方便。</p><h3 id="博客的搭建"><a href="#博客的搭建" class="headerlink" title="博客的搭建:"></a><strong>博客的搭建:</strong></h3><ul><li><a href="http://www.lovebxm.com/2017/05/30/buildBlog/" target="_blank" rel="noopener">基础教程</a>(大概需要20分钟，完成博客的基础模块，出自白小明大佬)</li><li><a href="https://www.jianshu.com/p/5973c05d7100" target="_blank" rel="noopener">进阶教程</a>(大概需要几个小时，扩展博客的功能，出自代码咖啡大佬)</li><li><a href="https://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="noopener">自由搭配教程</a>(出自Juli距离大佬)</li></ul><h3 id="备注"><a href="#备注" class="headerlink" title="备注:"></a><strong>备注:</strong></h3><p>&emsp;&emsp;1.进阶教程中的评论系统出问题推荐使用<a href="https://www.jianshu.com/p/5888bd91d070?open_source=weibo_search" target="_blank" rel="noopener">畅言</a><br>&emsp;&emsp;2.进阶教程中的搜索功能添加出现问题的话，可以采用另一种方法<a href="https://zty.js.org/post/2016/07/08/hexo-localsearch.html" target="_blank" rel="noopener">教程</a>(出自Zetao Yang大佬)</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/05/04/Hexo-Next-GithubPage-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HelloWorld 之 佛祖保佑 永无BUG</title>
      <link>http://yoursite.com/2018/05/01/hello-world/</link>
      <guid>http://yoursite.com/2018/05/01/hello-world/</guid>
      <pubDate>Tue, 01 May 2018 14:45:11 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;HelloWorld-之-佛祖保佑-永无BUG&quot;&gt;&lt;a href=&quot;#HelloWorld-之-佛祖保佑-永无BUG&quot; class=&quot;headerlink&quot; title=&quot;HelloWorld 之 佛祖保佑 永无BUG&quot;&gt;&lt;/a&gt;HelloWorld 之 佛祖保佑
        
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="HelloWorld-之-佛祖保佑-永无BUG"><a href="#HelloWorld-之-佛祖保佑-永无BUG" class="headerlink" title="HelloWorld 之 佛祖保佑 永无BUG"></a>HelloWorld 之 佛祖保佑 永无BUG</h1><pre><code>/*                     _ooOoo_                    o8888888o                    88&quot; . &quot;88                    (| -_- |)                    O\  =  /O                 ____/`---&apos;\____               .&apos;  \\|     |//  `.              /  \\|||  :  |||//  \             /  _||||| -:- |||||-  \             |   | \\\  -  /// |   |             | \_|  &apos;&apos;\---/&apos;&apos;  |   |             \  .-\__  `-`  ___/-. /           ___`. .&apos;  /--.--\  `. . __        .&quot;&quot; &apos;&lt;  `.___\_&lt;|&gt;_/___.&apos;  &gt;&apos;&quot;&quot;.       | | :  `- \`.;`\ _ /`;.`/ - ` : | |       \  \ `-.   \_ __\ /__ _/   .-` /  /  ======`-.____`-.___\_____/___.-`____.-&apos;======                     `=---=&apos;  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^           佛祖保佑       永无BUG  */</code></pre><h3 id="备注"><a href="#备注" class="headerlink" title="备注:"></a><strong>备注:</strong></h3><p>&emsp;&emsp;1.更多图请移步至<a href="https://www.cnblogs.com/wangjunwei/p/6995467.html" target="_blank" rel="noopener">图库</a></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/05/01/hello-world/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
