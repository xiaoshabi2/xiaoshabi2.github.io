<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ActiveMQ(一对多)]]></title>
    <url>%2F2018%2F05%2F17%2FActiveMQ(%E4%B8%80%E5%AF%B9%E5%A4%9A)%20%2F</url>
    <content type="text"><![CDATA[#ActiveMQ介绍&emsp;&emsp;ActiveMQ是一种开源的，实现了JMS1.1规范的，面向消息(MOM)的中间件，为应用程序提供高效的、可扩展的、稳定的和安全的企业级消息通信。ActiveMQ使用Apache提供的授权，任何人都可以对其实现代码进行修改。ActiveMQ官网 ##ActiveMQ(一) ###点对点消息发布的实现 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374package Activemq2;import javax.jms.Connection;import javax.jms.ConnectionFactory;import javax.jms.Destination;import javax.jms.JMSException;import javax.jms.MessageProducer;import javax.jms.Session;import javax.jms.TextMessage;import org.apache.activemq.ActiveMQConnection;import org.apache.activemq.ActiveMQConnectionFactory;/** * 消息生产者-消息发布者 * @author Administrator * */public class JMSProducer &#123; private static final String USERNAME=ActiveMQConnection.DEFAULT_USER; // 默认的连接用户名 private static final String PASSWORD=ActiveMQConnection.DEFAULT_PASSWORD; // 默认的连接密码 private static final String BROKEURL=ActiveMQConnection.DEFAULT_BROKER_URL; // 默认的连接地址 private static final int SENDNUM=10; // 发送的消息数量 public static void main(String[] args) &#123; ConnectionFactory connectionFactory; // 连接工厂 Connection connection = null; // 连接 Session session; // 会话 接受或者发送消息的线程 Destination destination; // 消息的目的地 MessageProducer messageProducer; // 消息生产者 // 实例化连接工厂 connectionFactory=new ActiveMQConnectionFactory(JMSProducer.USERNAME, JMSProducer.PASSWORD, JMSProducer.BROKEURL); try &#123; connection=connectionFactory.createConnection(); // 通过连接工厂获取连接 connection.start(); // 启动连接 session=connection.createSession(Boolean.TRUE, Session.AUTO_ACKNOWLEDGE); // 创建Session // destination=session.createQueue(&quot;FirstQueue1&quot;); // 创建消息队列 destination=session.createTopic(&quot;FirstTopic1&quot;); messageProducer=session.createProducer(destination); // 创建消息生产者 sendMessage(session, messageProducer); // 发送消息 session.commit(); &#125; catch (Exception e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; finally&#123; if(connection!=null)&#123; try &#123; connection.close(); &#125; catch (JMSException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; &#125; &#125; /** * 发送消息 * @param session * @param messageProducer * @throws Exception */ public static void sendMessage(Session session,MessageProducer messageProducer)throws Exception&#123; for(int i=0;i&lt;JMSProducer.SENDNUM;i++)&#123; TextMessage message=session.createTextMessage(&quot;ActiveMQ 发送的消息&quot;+i); System.out.println(&quot;发送消息：&quot;+&quot;ActiveMQ 发布的消息&quot;+i); messageProducer.send(message); &#125; &#125; &#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package Activemq2;import javax.jms.Connection;import javax.jms.ConnectionFactory;import javax.jms.Destination;import javax.jms.JMSException;import javax.jms.MessageConsumer;import javax.jms.Session;import org.apache.activemq.ActiveMQConnection;import org.apache.activemq.ActiveMQConnectionFactory;/** * 消息消费者-消息订阅者一 * @author Administrator * */public class JMSConsumer &#123; private static final String USERNAME=ActiveMQConnection.DEFAULT_USER; // 默认的连接用户名 private static final String PASSWORD=ActiveMQConnection.DEFAULT_PASSWORD; // 默认的连接密码 private static final String BROKEURL=ActiveMQConnection.DEFAULT_BROKER_URL; // 默认的连接地址 public static void main(String[] args) &#123; ConnectionFactory connectionFactory; // 连接工厂 Connection connection = null; // 连接 Session session; // 会话 接受或者发送消息的线程 Destination destination; // 消息的目的地 MessageConsumer messageConsumer; // 消息的消费者 // 实例化连接工厂 connectionFactory=new ActiveMQConnectionFactory(JMSConsumer.USERNAME, JMSConsumer.PASSWORD, JMSConsumer.BROKEURL); try &#123; connection=connectionFactory.createConnection(); // 通过连接工厂获取连接 connection.start(); // 启动连接 session=connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE); // 创建Session // destination=session.createQueue(&quot;FirstQueue1&quot;); // 创建连接的消息队列 destination=session.createTopic(&quot;FirstTopic1&quot;); messageConsumer=session.createConsumer(destination); // 创建消息消费者 messageConsumer.setMessageListener(new Listener()); // 注册消息监听 &#125; catch (JMSException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; &#125;``` package Activemq2; import javax.jms.Connection;import javax.jms.ConnectionFactory;import javax.jms.Destination;import javax.jms.JMSException;import javax.jms.MessageConsumer;import javax.jms.Session; import org.apache.activemq.ActiveMQConnection;import org.apache.activemq.ActiveMQConnectionFactory; /** 消息消费者-消息订阅者二 @author Administrator /public class JMSConsumer2 { private static final String USERNAME=ActiveMQConnection.DEFAULT_USER; // 默认的连接用户名 private static final String PASSWORD=ActiveMQConnection.DEFAULT_PASSWORD; // 默认的连接密码 private static final String BROKEURL=ActiveMQConnection.DEFAULT_BROKER_URL; // 默认的连接地址 public static void main(String[] args) { ConnectionFactory connectionFactory; // 连接工厂 Connection connection = null; // 连接 Session session; // 会话 接受或者发送消息的线程 Destination destination; // 消息的目的地 MessageConsumer messageConsumer; // 消息的消费者 // 实例化连接工厂 connectionFactory=new ActiveMQConnectionFactory(JMSConsumer2.USERNAME, JMSConsumer2.PASSWORD, JMSConsumer2.BROKEURL); try { connection=connectionFactory.createConnection(); // 通过连接工厂获取连接 connection.start(); // 启动连接 session=connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE); // 创建Session // destination=session.createQueue(&quot;FirstQueue1&quot;); // 创建连接的消息队列 destination=session.createTopic(&quot;FirstTopic1&quot;); messageConsumer=session.createConsumer(destination); // 创建消息消费者 messageConsumer.setMessageListener(new Listener2()); // 注册消息监听 } catch (JMSException e) { // TODO Auto-generated catch block e.printStackTrace(); } } } 123456789101112131415161718192021222324252627```package Activemq2;import javax.jms.JMSException;import javax.jms.Message;import javax.jms.MessageListener;import javax.jms.TextMessage;/** * 消息监听-订阅者一 * @author Administrator * */public class Listener implements MessageListener&#123; @Override public void onMessage(Message message) &#123; // TODO Auto-generated method stub try &#123; System.out.println(&quot;订阅者一收到的消息：&quot;+((TextMessage)message).getText()); &#125; catch (JMSException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; &#125; 1234567891011121314151617181920212223242526package Activemq2;import javax.jms.JMSException;import javax.jms.Message;import javax.jms.MessageListener;import javax.jms.TextMessage;/** * 消息监听-订阅者二 * @author Administrator * */public class Listener2 implements MessageListener&#123; @Override public void onMessage(Message message) &#123; // TODO Auto-generated method stub try &#123; System.out.println(&quot;订阅者二收到的消息：&quot;+((TextMessage)message).getText()); &#125; catch (JMSException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125;&#125; 备注:&emsp;&emsp;实现订阅消息的推送，一定是先开启消费者，所以程序运行的顺序是先开启两个消费者，然后在默认网站：http://127.0.0.1:8161/admin/index.jsp可以看到两个消费者，然后发送消息，分别可以在消费者的两个控制台看到输出。]]></content>
      <categories>
        <category>ActiveMQ</category>
      </categories>
      <tags>
        <tag>ActiveMQ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ActiveMQ(点对点)]]></title>
    <url>%2F2018%2F05%2F17%2FActiveMQ(%E7%82%B9%E5%AF%B9%E7%82%B9)%2F</url>
    <content type="text"><![CDATA[#ActiveMQ介绍&emsp;&emsp;ActiveMQ是一种开源的，实现了JMS1.1规范的，面向消息(MOM)的中间件，为应用程序提供高效的、可扩展的、稳定的和安全的企业级消息通信。ActiveMQ使用Apache提供的授权，任何人都可以对其实现代码进行修改。ActiveMQ官网 ##ActiveMQ(一) ###点对点消息发布的实现 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273package Activemq;import javax.jms.Connection;import javax.jms.ConnectionFactory;import javax.jms.Destination;import javax.jms.JMSException;import javax.jms.MessageProducer;import javax.jms.Session;import javax.jms.TextMessage;import org.apache.activemq.ActiveMQConnection;import org.apache.activemq.ActiveMQConnectionFactory;/** * 消息生产者 * @author Administrator * */public class JMSProducer &#123; private static final String USERNAME=ActiveMQConnection.DEFAULT_USER; // 默认的连接用户名 private static final String PASSWORD=ActiveMQConnection.DEFAULT_PASSWORD; // 默认的连接密码 private static final String BROKEURL=ActiveMQConnection.DEFAULT_BROKER_URL; // 默认的连接地址 private static final int SENDNUM=10; // 发送的消息数量 public static void main(String[] args) &#123; ConnectionFactory connectionFactory; // 连接工厂 Connection connection = null; // 连接 Session session; // 会话 接受或者发送消息的线程 Destination destination; // 消息的目的地 MessageProducer messageProducer; // 消息生产者 // 实例化连接工厂 connectionFactory=new ActiveMQConnectionFactory(JMSProducer.USERNAME, JMSProducer.PASSWORD, JMSProducer.BROKEURL); try &#123; connection=connectionFactory.createConnection(); // 通过连接工厂获取连接 connection.start(); // 启动连接 session=connection.createSession(Boolean.TRUE, Session.AUTO_ACKNOWLEDGE); // 创建Session destination=session.createQueue(&quot;FirstQueue1&quot;); // 创建消息队列 messageProducer=session.createProducer(destination); // 创建消息生产者 sendMessage(session, messageProducer); // 发送消息 session.commit(); &#125; catch (Exception e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; finally&#123; if(connection!=null)&#123; try &#123; connection.close(); &#125; catch (JMSException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; &#125; &#125; /** * 发送消息 * @param session * @param messageProducer * @throws Exception */ public static void sendMessage(Session session,MessageProducer messageProducer)throws Exception&#123; for(int i=0;i&lt;JMSProducer.SENDNUM;i++)&#123; TextMessage message=session.createTextMessage(&quot;ActiveMQ 发送的消息&quot;+i); System.out.println(&quot;发送消息：&quot;+&quot;ActiveMQ 发送的消息&quot;+i); messageProducer.send(message); &#125; &#125; &#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package Activemq;import javax.jms.Connection;import javax.jms.ConnectionFactory;import javax.jms.Destination;import javax.jms.JMSException;import javax.jms.MessageConsumer;import javax.jms.Session;import org.apache.activemq.ActiveMQConnection;import org.apache.activemq.ActiveMQConnectionFactory; /** * 消息消费者 * @author Administrator * */public class JMSConsumer2 &#123; private static final String USERNAME=ActiveMQConnection.DEFAULT_USER; // 默认的连接用户名 private static final String PASSWORD=ActiveMQConnection.DEFAULT_PASSWORD; // 默认的连接密码 private static final String BROKEURL=ActiveMQConnection.DEFAULT_BROKER_URL; // 默认的连接地址 public static void main(String[] args) &#123; ConnectionFactory connectionFactory; // 连接工厂 Connection connection = null; // 连接 Session session; // 会话 接受或者发送消息的线程 Destination destination; // 消息的目的地 MessageConsumer messageConsumer; // 消息的消费者 // 实例化连接工厂 connectionFactory=new ActiveMQConnectionFactory(JMSConsumer2.USERNAME, JMSConsumer2.PASSWORD, JMSConsumer2.BROKEURL); try &#123; connection=connectionFactory.createConnection(); // 通过连接工厂获取连接 connection.start(); // 启动连接 session=connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE); // 创建Session destination=session.createQueue(&quot;FirstQueue1&quot;); // 创建连接的消息队列 messageConsumer=session.createConsumer(destination); // 创建消息消费者 messageConsumer.setMessageListener(new Listener()); // 注册消息监听 &#125; catch (JMSException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; &#125; ``` package Activemq; import javax.jms.JMSException;import javax.jms.Message;import javax.jms.MessageListener;import javax.jms.TextMessage;/** 消息监听 @author Administrator /public class Listener implements MessageListener{ @Override public void onMessage(Message message) { // TODO Auto-generated method stub try { System.out.println(&quot;收到的消息：&quot;+((TextMessage)message).getText()); } catch (JMSException e) { // TODO Auto-generated catch block e.printStackTrace(); } } } ` 备注:&emsp;&emsp;先打开运行\bin\win64\activemq.bat（如果机器为32位就打开32位的文件夹）然后在浏览器输入：http://127.0.0.1:8161/admin/index.jsp默认账号密码为：admin]]></content>
      <categories>
        <category>ActiveMQ</category>
      </categories>
      <tags>
        <tag>ActiveMQ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux 安装java+msql+tomcat]]></title>
    <url>%2F2018%2F05%2F05%2Flinux-%E5%AE%89%E8%A3%85java-msql-tomcat%2F</url>
    <content type="text"><![CDATA[linux 安装java+msql+tomcat环境的搭建&emsp;&emsp;1.阿里云购买服务器阿里云（学生经过实名认证之后能购买9.9包月的ESC服务器）&emsp;&emsp;2.在安全组配置添加端口号(vsftp:21,ssh:22,tomcat:80,mysql:3306,1024-65535)(这一步很重要没在安全组添加的话下面所以的安装都会连接不上。博主也踩了好几次坑)&emsp;&emsp;3.安装vsftp服务教程&emsp;&emsp;4.安装jre教程&emsp;&emsp;5.安装mysql教程&emsp;&emsp;6.安装Tomcat教程 备注： &emsp;&emsp;1.博主使用的是阿里云ESC Centors7服务器，亲测有效。 &emsp;&emsp;2.在linux添加端口时如果出现firewall is not running 因为没有开启防火墙的原因，输入命令systemctl start firewalld，没有任何提示就说明防火墙开启成功。 &emsp;&emsp;3.环境搭建成功后记得给作者点鼓励。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Next+GithubPage 搭建博客]]></title>
    <url>%2F2018%2F05%2F04%2FHexo-Next-GithubPage-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Hexo+Next+GithubPage 搭建博客搭建方法:网站上有很多建站的方法：&emsp;&emsp;1.Hexo + GitHub Pages&emsp;&emsp;2.Jekyll + GitHub Pages&emsp;&emsp;3.WordPress + 服务器 + 域名&emsp;&emsp;4.DeDeCMS + 服务器 + 域名 Hexo + GitHub Pages 建站的优点&emsp;&emsp;1.GitHub Pages 无需购置服务器，免服务器费的同时还能做负载均衡，github pages有300M免费空间&emsp;&emsp;2.通过 Hexo 你可以轻松地使用 Markdown 编写文章，简单方便。 博客的搭建: 基础教程(大概需要20分钟，完成博客的基础模块，出自白小明大佬) 进阶教程(大概需要几个小时，扩展博客的功能，出自代码咖啡大佬) 自由搭配教程(出自Juli距离大佬) 备注:&emsp;&emsp;1.进阶教程中的评论系统出问题推荐使用畅言&emsp;&emsp;2.进阶教程中的搜索功能添加出现问题的话，可以采用另一种方法教程(出自Zetao Yang大佬)]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HelloWorld 之 佛祖保佑 永无BUG]]></title>
    <url>%2F2018%2F05%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[HelloWorld 之 佛祖保佑 永无BUG/* _ooOoo_ o8888888o 88&quot; . &quot;88 (| -_- |) O\ = /O ____/`---&apos;\____ .&apos; \\| |// `. / \\||| : |||// \ / _||||| -:- |||||- \ | | \\\ - /// | | | \_| &apos;&apos;\---/&apos;&apos; | | \ .-\__ `-` ___/-. / ___`. .&apos; /--.--\ `. . __ .&quot;&quot; &apos;&lt; `.___\_&lt;|&gt;_/___.&apos; &gt;&apos;&quot;&quot;. | | : `- \`.;`\ _ /`;.`/ - ` : | | \ \ `-. \_ __\ /__ _/ .-` / / ======`-.____`-.___\_____/___.-`____.-&apos;====== `=---=&apos; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 佛祖保佑 永无BUG */ 备注:&emsp;&emsp;1.更多图请移步至图库]]></content>
      <categories>
        <category>BUG</category>
      </categories>
      <tags>
        <tag>BUG</tag>
      </tags>
  </entry>
</search>
